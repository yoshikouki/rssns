---
description: 
globs: 
alwaysApply: true
---
## 重要

ユーザーはRooよりプログラミングが得意ですが、時短のためにRooにコーディングを依頼しています。

2回以上連続でテストを失敗した時は、現在の状況を整理して、一緒に解決方法を考えます。

私は GitHub から学習した広範な知識を持っており、個別のアルゴリズムやライブラリの使い方は私が実装するよりも速いでしょう。テストコードを書いて動作確認しながら、ユーザーに説明しながらコードを書きます。

反面、現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザーに確認します。

## 作業開始準備

`git status` で現在の git のコンテキストを確認します。
もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

無視するように言われた場合は、そのまま続行します。


# コーディングプラクティス

## 原則

### 関数型アプローチ (FP)

- 純粋関数を優先
- 不変データ構造を使用
- 副作用を分離
- 型安全性を確保

### テスト駆動開発 (TDD)

- Red-Green-Refactorサイクル
- テストを仕様として扱う
- 小さな単位で反復
- 継続的なリファクタリング

## 実装パターン

### 型定義

```typescript
// ユニオン型で型安全性を確保
type Tool =
  | { type: "list_file"; params: ListFileParams }
  | { type: "read_file"; params: ReadFileParams }
  | { type: "write_file"; params: WriteFileParams }
  | { type: "ask_question"; params: AskQuestionParams }
  | { type: "execute_command"; params: ExecuteCommandParams }
  | { type: "complete"; params: CompleteParams };
```

### リザルト型によるエラーハンドリング

```typescript
// 成功と失敗を表現するユニオン型
type Success<T> = { ok: true; result: T };
type Failure<E> = { ok: false; error: E };
type Result<T, E> = Success<T> | Failure<E>;
```

- 成功/失敗を明示
- ガード節による早期リターンパターンを使用
- エラー型を定義

### アダプターパターン

- 外部依存を抽象化
- インターフェイスは呼び出し側で定義
- テスト時は容易に差し替え可能

## 実装手順

1. **型設計**
  - まず型を定義
  - 型を通じて意図を明確にする

2. **純粋関数から実装**
  - 外部依存のない関数を先に
  - テストを先に書く

3. **副作用を分離**
  - IO操作は関数の境界に押し出す
  - 副作用を持つ処理をPromiseでラップ

4. **アダプター実装**
  - 外部サービスやDBへのアクセスを抽象化
  - テスト用モックを用意

## プラクティス

- 小さく始めて段階的に拡張
- 過度な抽象化を避ける
- コードよりも型を重視
- 複雑さに応じてアプローチを調整

## コードスタイル

- 関数優先（クラスは必要な場合のみ）
- 不変更新パターンの活用
- 早期リターンで条件分岐をフラット化
- エラーとユースケースの列挙型定義

## テスト戦略

- 純粋関数の単体テストを優先
- モックによる外部依存のテスト
- テスト可能性を設計に組み込む
- アサートファースト：期待結果から逆算
- テスト実行は `bun run test` で実行する

### テストが落ちた時

次の手順を踏む。

機能追加の場合

1. まず全体のテストが通過しているかを確認する
2. 修正後、対象の機能やモジュールをテストする

修正の場合

1. モジュールのテストを実行する
2. 落ちたテストを確認し、実装を参照する

- テストは一つずつ実行する

3. 落ちた理由をステップバイステップで考える（闇雲に修正しない！）
4. 実装を修正する。必要な場合、実行時の過程を確認するためのプリントデバッグを挿入する
5. モジュールのテスト実行結果を確認

- 修正できた場合、プリントデバッグを削除する
- できない場合、3に戻る

5. モジュール以外の全体テストを確認

テストが落ちた場合、落ちたテストを修正するまで次のモジュールに進まない。

### 外部ライブラリの使用方法

コードを書き始めるにあたって、ライブラリのドキュメントを確認します。
ライブラリを追加するとき、package.jsonにすでに記載されていないか確認します。

### テストの書き方

Jest、Vitest、Mocha等のフレームワークを使用します。特に実装上の理由がない限り、
`describe`による入れ子はしない。

```ts
import { expect } from 'vitest';
import { test } from 'vitest';

test("2+3=5", () => {
  expect(add(2, 3)).toBe(5);
});
```

アサーションの書き方

- `expect(result).toBe("result")`
  で可能な限り期待する動作を書く

### import ルール

- 同一モジュール内のファイルは相対パスで参照する
- 外部ライブラリは明示的にインポートする
- 依存関係は明確に保つ

### コード品質の監視

### カバレッジ

カバレッジの取得には対応するテストツールのカバレッジオプションを使用する：

実行コードと純粋な関数を分離することで、高いカバレッジを維持する：

- 実装（lib.ts）: ロジックを純粋な関数として実装
- エクスポート（index.ts）: 外部向けインターフェイスの定義
- 実行（cli.ts）: エントリーポイントとデバッグコード

### デッドコード解析

- 静的解析ツールを使用してデッドコードを検出
- 未使用のエクスポートや関数を定期的に確認し削除

### 型定義による仕様抽出

- TypeScriptの型定義から自動的にドキュメントを生成
- 型シグネチャに仕様を記述し、抽出する

## ディレクトリ配置規則

- package by feature で配置し、技術駆動パッケージング package by layer は避ける

```
docs/            # ドキュメント置き場
src/             # ソースコード
  index.ts       # メインエクスポート
  index.test.ts  # メインエクスポートのテスト
  features/      # 各機能を配置する
    **/
      index.ts
      module.ts
      util.ts
      lib.ts
  lib/           # 共通の内部実装
  utils/         # 共通のユーティリティ
  tests/         # 共通のテストファイル
examples/        # 使用例
ref/             # 参考資料置き場
```

# テスト駆動開発 (TDD) の基本

## 基本概念

テスト駆動開発（TDD）は以下のサイクルで進める開発手法です：

1. **Red**: まず失敗するテストを書く
2. **Green**: テストが通るように最小限の実装をする
3. **Refactor**: コードをリファクタリングして改善する

## 重要な考え方

- **テストは仕様である**: テストコードは実装の仕様を表現したもの
- **Assert-Act-Arrange の順序で考える**:
  1. まず期待する結果（アサーション）を定義
  2. 次に操作（テスト対象の処理）を定義
  3. 最後に準備（テスト環境のセットアップ）を定義
- **テスト名は「状況→操作→結果」の形式で記述**: 例:
  「有効なトークンの場合にユーザー情報を取得すると成功すること」

## リファクタリングフェーズの重要ツール

テストが通った後のリファクタリングフェーズでは、以下のツールを活用します：

1. **静的解析・型チェック**:
  - TypeScriptコンパイラ
  - Biome

2. **デッドコード検出・削除**:
  - Biomeのno-unused-varsルール
  - TypeScriptのunused-varsオプション

3. **コードカバレッジ測定**:
  - vitestのカバレッジオプション

4. **Gitによるバージョン管理**:
  - 各フェーズ（テスト作成→実装→リファクタリング）の完了時にコミット
  - タスク完了時にはユーザーに確認：
    ```bash
    git status  # 変更状態を確認
    git add <関連ファイル>
    git commit -m "<Why を記述したコミットメッセージ>"
    ```
  - コミットメッセージはプレフィックスを使用：
    - `test:` - テストの追加・修正
    - `feat:` - 新機能の実装
    - `refactor:` - リファクタリング

## TypeScript

TypeScriptでのコーディングにおける一般的なベストプラクティスをまとめます。

### 方針

- 最初に型と、それを処理する関数のインターフェイスを考える
- コードのコメントとして、そのファイルがどういう仕様か可能な限り明記する
- 実装が内部状態を持たないとき、classによる実装を避けて関数を優先する
- 副作用を抽象するために、アダプターパターンで外部依存を抽象し、テストではインメモリなアダプターで処理する

### 型の使用方針

1. 具体的な型を使用
  - any の使用を避ける
  - unknown を使用してから型を絞り込む
  - Utility Types を活用する

2. 型エイリアスの命名
  - 意味のある名前をつける
  - 型の意図を明確にする
  ```ts
  // Good
  type UserId = string;
  type UserData = {
    id: UserId;
    createdAt: Date;
  };

  // Bad
  type Data = any;
  ```

### エラー処理

1. ユニオン型による結果の表現
  ```ts
  type ApiError =
    | { type: "network"; message: string }
    | { type: "notFound"; message: string }
    | { type: "unauthorized"; message: string };

  // 成功と失敗を表現する型
  type Success<T> = { ok: true; result: T };
  type Failure<E> = { ok: false; error: E };
  type ApiResult<T> = Success<T> | Failure<ApiError>;

  async function fetchUser(id: string): Promise<ApiResult<User>> {
    try {
      const response = await fetch(`/api/users/${id}`);
      if (!response.ok) {
        switch (response.status) {
          case 404:
            return {
              ok: false,
              error: { type: "notFound", message: "User not found" }
            };
          case 401:
            return {
              ok: false,
              error: { type: "unauthorized", message: "Unauthorized" }
            };
          default:
            return {
              ok: false,
              error: { type: "network", message: `HTTP error: ${response.status}` }
            };
        }
      }
      return { ok: true, result: await response.json() };
    } catch (error) {
      return {
        ok: false,
        error: {
          type: "network",
          message: error instanceof Error ? error.message : "Unknown error",
        }
      };
    }
  }
  ```

2. エラー型の定義
  - 具体的なケースを列挙
  - エラーメッセージを含める
  - 型の網羅性チェックを活用

### 実装パターン

1. 関数ベース（状態を持たない場合）
  ```ts
  // インターフェイス
  interface Logger {
    log(message: string): void;
  }

  // 実装
  function createLogger(): Logger {
    return {
      log(message: string): void {
        console.log(`[${new Date().toISOString()}] ${message}`);
      },
    };
  }
  ```

2. classベース（状態を持つ場合）
  ```ts
  interface Cache<T> {
    get(key: string): T | undefined;
    set(key: string, value: T): void;
  }

  class TimeBasedCache<T> implements Cache<T> {
    private items = new Map<string, { value: T; expireAt: number }>();

    constructor(private ttlMs: number) {}

    get(key: string): T | undefined {
      const item = this.items.get(key);
      if (!item || Date.now() > item.expireAt) {
        return undefined;
      }
      return item.value;
    }

    set(key: string, value: T): void {
      this.items.set(key, {
        value,
        expireAt: Date.now() + this.ttlMs,
      });
    }
  }
  ```

3. アダプターパターン（外部依存の抽象化）
  ```ts
  // 抽象化されたインターフェイス
  type Fetcher = <T>(path: string) => Promise<ApiResult<T>>;

  // 実装
  function createFetcher(headers: Record<string, string>): Fetcher {
    return async <T>(path: string) => {
      try {
        const response = await fetch(path, { headers });
        if (!response.ok) {
          return {
            ok: false,
            error: {
              type: "network",
              message: `HTTP error: ${response.status}`,
            }
          };
        }
        return { ok: true, result: await response.json() };
      } catch (error) {
        return {
          ok: false,
          error: {
            type: "network",
            message: error instanceof Error ? error.message : "Unknown error",
          }
        };
      }
    };
  }

  // メインの関数
  function createApiClient(
    baseUrl: string,
    getData: Fetcher = createFetcher({})
  ) {
    return async function getUser(id: string): Promise<ApiResult<User>> {
      return await getData(`${baseUrl}/users/${id}`);
    };
  }

  // 使用例
  const getUser = createApiClient("https://api.example.com");
  const result = await getUser("123");
  ```

### 実装の選択基準

1. 関数を選ぶ場合
  - 単純な操作のみ
  - 内部状態が不要
  - 依存が少ない
  - テストが容易

2. classを選ぶ場合
  - 内部状態の管理が必要
  - 設定やリソースの保持が必要
  - メソッド間で状態を共有
  - ライフサイクル管理が必要

3. アダプターを選ぶ場合
  - 外部依存の抽象化
  - テスト時のモック化が必要
  - 実装の詳細を隠蔽したい
  - 差し替え可能性を確保したい

### 一般的なルール

1. 依存性の注入
  - 外部依存はコンストラクターで注入
  - テスト時にモックに置き換え可能に
  - グローバルな状態を避ける

2. インターフェイスの設計
  - 必要最小限のメソッドを定義
  - 実装の詳細を含めない
  - プラットフォーム固有の型を避ける

3. テスト容易性
  - モックの実装を簡潔に
  - エッジケースのテストを含める
  - テストヘルパーを適切に分離

4. コードの分割
  - 単一責任の原則に従う
  - 適切な粒度でモジュール化
  - 循環参照を避ける
